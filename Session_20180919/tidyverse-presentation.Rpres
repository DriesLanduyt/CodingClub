tidyverse-presentation
========================================================
author: Bram Sercu
date: October 19, 2017
autosize: true


The tidyverse ecosystem
========================================================
tidyverse is a set of related packages

![alt text](tidyverse-presentation-figure/tidyverse_1.png)

```{r echo=FALSE}
library(tidyverse)
```

Part 1: Tidy data
========================================================

Tidy data
========================================================

At the core of the tidyverse is the concept of **tidy** data

There are three interrelated rules which make a dataset tidy:

- Each variable must have its own column.
- Each observation must have its own row.
- Each value must have its own cell.

simpler set of practical instructions:

- Put each dataset in a tibble.
- Put each variable in a column.


Untidy data
=======================================================

- One variable might be spread across multiple columns.

- One observation might be scattered across multiple rows.


Typically a dataset will only suffer from one of these problems; it’ll only suffer from both if you’re really unlucky! To fix these problems, you’ll need the two most important functions in tidyr: gather() and spread().

Is this a tidy dataset? (1)
=============================================

```{r echo=FALSE}
mt <- mtcars
names(mt)[1:3] <- c("Miles_per_gallon","Nb_cylinders","Displacement")
head(mt[,1:3])
```

Is this a tidy dataset? (2)
========================================

```{r echo=FALSE}
tmp <- as.data.frame(matrix(runif(15,0,20),ncol=3))
names(tmp) <- c("January","February","March")
tmp$Site <- paste("Site",1:5)
tmp[,c(4,1:3)]
```

Is this a tidy dataset? (3)
=================================

```{r echo=FALSE}
weather <- read.delim(
 file = "http://stat405.had.co.nz/data/weather.txt",
 stringsAsFactors = FALSE,
 na.strings = ""
)
head(weather[,1:7])
```

Creating tidy data
=======================================================

In tidyr there are **4** main functions:
- (i) gather: put several columns into one

```{r}
tmp_g <- gather(tmp, key = "Month", value = "Temperature", -Site)
tmp_g
```


Links
- <http://r4ds.had.co.nz/tidy-data.html>

Creating tidy data
=============================================

- (i) gather: put several columns into one
- (ii) spread: put one column into several

```{r}
(tmp_s <- spread(tmp_g, key = Month , value = Temperature))
```

Creating tidy data
=============================

- (i) gather: put several columns into one
- (ii) spread: put one column into several
- (iii) separate: separate values into several columns

```{r, echo=FALSE}
dat <- data.frame(Code = c("Gent_OostVlaanderen","Brugge_WestVlaanderen","Antwerpen_Antwerpen","Hasselt_Limburg","Leuven_VlaamsBrabant"),
                  Population = c(1.48,1.18,1.82,0.86,1.12))
dat
```

```{r}
(dat_sep <- separate(dat, col = Code, into = c("City", "Province"), sep = "_"))
```

Creating tidy data
===============================

- (i) gather: put several columns into one
- (ii) spread: put one column into several
- (iii) separate: separate values into several columns
- (iv) unite: units values from several columns into one

```{r}
unite(dat_sep, col = "Province/City", Province, City, sep = "/")
```

Time for some excercices ...

Part 2. dplyr
=========================

dplyr
================

dplyr is used to **manipulate** tidy data, there are five main functions:

- (i) filter: pick observations by their values

```{r echo=FALSE}
mtcars$Type <- rownames(mtcars)
mtcars <- mtcars[,c(12,1:11)]
```

```{r}
filter(mtcars, gear == 4)
```


dplyr
================

dplyr is used to **manipulate** tidy data, there are five main functions:

- (i) filter: pick observations by their values
- (ii) arrange: re-order rows

```{r}
arrange(mtcars, mpg)
```

dplyr
================

dplyr is used to **manipulate** tidy data, there are five main functions:

- (i) filter: pick observations by their values
- (ii) arrange: re-order rows
- (iii) select: pick columns

```{r echo=FALSE}
data(mtcars)
```

```{r}
select(mtcars, mpg:disp)
```

dplyr
================

dplyr is used to **manipulate** tidy data, there are five main functions:

- (i) filter: pick observations by their values
- (ii) arrange: re-order rows
- (iii) select: pick columns
- (iv) mutate: create new variables

```{r}
mutate(mtcars, EFI = mpg * wt)
```

dplyr
================

dplyr is used to **manipulate** tidy data, there are five main functions:

- (i) filter: pick observations by their values
- (ii) arrange: re-order rows
- (iii) select: pick columns
- (iv) mutate: create new variables
- (v) summarise: collapse many value to a single summary

```{r}
summarise(mtcars, Mean = mean(mpg), SD = sd(mpg))
```

dplyr
================

dplyr is used to **manipulate** tidy data, there are five main functions:

- (i) filter: pick observations by their values
- (ii) arrange: re-order rows
- (iii) select: pick columns
- (iv) mutate: create new variables
- (v) summarise: collapse many value to a single summary
- (bonus) group_by: to make summarise sooo useful

```{r}
mt_g <- group_by(mtcars, gear)
summarise(mt_g, Mean = mean(mpg))
```

dplyr
=========================

Time for some excercices


Part 3. Piping rules
======================

Piping
========================================================

Sequential manipulations of a dataset.

Use '%>%' to connect manipulations

```{r}
dat
dat %>%
  separate(Code, into = c("City","Province"), sep = "_") %>%
  arrange(City)
```







Part 2: working with your data
========================================================

Subset data
========================================================

Subset observations with  'filter'

- filter(dataset, logical criteria on certain columns)
- use logic operators to set (multiple) criteria
- eg. filter(cars, speed<8)

Subset variables with 'select'
- select(dataset, name of column1, name of column2, ...)
- use helper functions to define the columns more efficiently
  - select(cars, - dist) removes column dist from dataset
  - select(cars, speed:dist) selects all columns between column 'speed' and column 'dist' 


Make new variables
=======================================================

compute and append one or more new columns with 'mutate'
- mutate(dataset, new_column = operation between columns)
- eg. mutate(iris, Sepal.Area = Sepal.Length*Sepal.Width, Sepal.Petal.fraction = Sepal.Length/Petal.Length )
- use functions to calculate more complex measurements
- transmute() works as mutate() but removes the original columns


Summarise data
=======================================================

summarise data into one single row of values

- summarise(iris, avg=mean(Sepal.Length))
- summarise_all(iris, funs(mean))


apply transformations to groups of the data
=======================================================

The function 'group_by' allows you to  define groups in the data
When these grouped dataset is used to summarise or to mutate data,
the transformations are done per group.

- iris %>% group_by(Species) %>% summarise(avg=mean(Sepal.Length))
- iris %>% group_by(Species) %>% summarise_all(funs(mean))
- iris %>% group_by(Species) %>% mutate(Sepal.Length.log=log(Sepal.Length))


Joining datatables
========================================================

lef_join(x, y, by = NULL,
copy=FALSE, suffix=c(“.x”,“.y”),…)
Join matching values from y to x.

right_join(x, y, by = NULL, copy =
FALSE, suffix=c(“.x”,“.y”),…)
Join matching values from x to y.

inner_join(x, y, by = NULL, copy =
FALSE, suffix=c(“.x”,“.y”),…)
Join data. Retain only rows with
matches.

full_join(x, y, by = NULL,
copy=FALSE, suffix=c(“.x”,“.y”),…)
Join data. Retain all values, all rows



References
========================================================

Book: <http://r4ds.had.co.nz/index.html>

Cheat sheets: <https://www.rstudio.com/resources/cheatsheets/>

Vignette: <https://cran.r-project.org/web/packages/dplyr/dplyr.pdf>


