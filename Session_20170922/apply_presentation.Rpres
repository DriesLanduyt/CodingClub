Mastering *apply
========================================================
author: Lionel Hertzog  
date: 22/09/2017
autosize: true

```{r include=FALSE}
knitr::opts_chunk$set(tidy=TRUE)
library(plyr)
```

Aim of today's session
========================================================

Learn to master the *apply functions:

- The basics: apply, lapply and sapply
- Going crazy: mapply
- Doing some magic: plyr

apply
========================================================

Definition: apply a **function** to the specified **margins** of an **array**

- What is a function?
- What is a margin?
- What is an array?

apply
========================================================

Definition: apply a **function** to the specified **margins** of an **array**

- What is a function? 

```{r}
foo <- function(x){
  out <- x**2
  return(out)
}
```

apply
========================================================

Definition: apply a **function** to the specified **margins** of an **array**

- What is an array? 

An array is a structured collection of data of the **same** type (numeric ...)

```{r echo=FALSE}
xy <- expand.grid(x=1:5,y=1:5)
xy$tt <- round(rnorm(25),1)
plot(y~x,xy,type="n",xaxt="n",yaxt="n",bty="n",xlab="",ylab="")
with(xy,text(x,y,labels = tt,cex = 1.5))
```


apply
========================================================

Definition: apply a **function** to the specified **margins** of an **array**

- What is a margin? 

```{r echo=FALSE}
xy <- expand.grid(x=0:5,y=0:5)
xy$tt <- round(rnorm(36),1)
plot(y~x,xy,type="n",xaxt="n",yaxt="n",bty="n",xlab="",ylab="")
with(subset(xy,x!=0 & y!=5),text(x,y,labels = tt,cex = 1.5))
arrows(0.5,4.5,4.5,4.5)
arrows(0.5,4.5,0.5,0.5)
mtext(text = "1st Margin: Rows",side = 2,line = -3,cex=1.5)
mtext(text = "2nd Margin: Columns",side = 3,line = -2,cex=1.5)

```

apply
========================================================

How does it work:

**apply( _some\_array_ , _some\_margins_ , _some\_functions_ )**

```{r}
#create an array
some_array <- matrix(rnorm(25),nrow=5)
#determine the margins of the array
dim(some_array)
#get the sum for each row
apply(some_array,1,sum)
```

apply
========================================================

For custom functions we can either explicitely create a function:
```{r}
foo <- function(x) sum(x**2)
apply(some_array,1,foo)
```

Or we can use anonymous function:
```{r}
apply(some_array,1,function(x) sum(x**2))
```


apply
========================================================

Time for some exercise, see **apply_exo.Rmd** file, we will use a standard community dataset format:

```{r echo=FALSE}
(comm <- matrix(rpois(50,2),nrow = 5,
                dimnames = list(paste0("Pl",1:5),
                                paste0("Sp",1:10))))
```

l(ist)apply
========================================================

Official definition:

lapply returns a **list** of the same length as X, each element of which is the result of **applying some function** to the corresponding element of X.

...

**lapply( some _object , some_function , some_arguments )**

...

some_object is a vector (atomic or list) or an expression object. Other objects (including classed objects) will be **coerced** by base::as.list.

l(ist)apply
========================================================

lapply in action:

```{r}
(some_list <- list(rep(1,5),rnorm(5)))
lapply(some_list,max)
```

l(ist)apply
========================================================

lapply in action:

```{r}
(some_df <- data.frame(X1=runif(5),X2=rnorm(5)))
lapply(some_df,mean)
```

l(ist)apply
========================================================

Again we can define and use (anonymous) custom functions:

```{r}
#a useless function
lapply(some_df,function(x) c(x[1]+1,x[2]+2))
```

l(ist)apply
========================================================

More interesting say we want to simulate some data based on the observed mean/sd of a dataset:

```{r}
lapply(some_df,function(x) 
      rnorm(5,mean(x),sd(x)))
```

l(ist)apply
========================================================

One can pass **argument** to the function by naming them:

```{r}
lapply(some_df,paste,collapse = "-")
```

l(ist)apply
========================================================

Time for some exercice, this time we'll use the **mtcars** dataset:
```{r}
data(mtcars)
head(mtcars)
```

s(implify)apply
========================================================

Same as _lapply_ but this time the output will be a **vector** or a **matrix** instead of a **list**

```{r}
#average value per column
sapply(mtcars,mean)
```

Official doc: sapply is a user-friendly version and wrapper of lapply by default returning a vector, matrix or, if simplify = "array", an array if **appropriate**

s(implify)apply
========================================================

This is useful when one wants to display the information in a nice and compact format:

```{r}
#write up own summary statistic function
sum_stat <- function(x){
  quants <- quantile(x,probs=c(0.25,0.5,0.75),names=FALSE)
  return(c(Q25 = quants[1],Median=quants[2],Q75=quants[3]))
}
sapply(mtcars,sum_stat)
```

s(implify)apply
========================================================

But it will only work the **result** of applying the function to **each element** of the object is of the **same length**

```{r}
#sapply only coerce response into arrays when all output are of similar length
(sapply(mtcars,function(x) x[x>10]))
```

s(implify)apply
========================================================

Time for some exercice, we'll use again the **mtcars** dataset.

s(implify)apply
========================================================

sapply for lazy coders:

```{r}
sapply(1:11,function(data,index) mean(data[,index]),data=mtcars)
```


t(abular)apply
========================================================

Only shortly shown here, very similar to **aggregate**, **by** or the **dplyr-groupy_by-summarise**.

_tapply_ return the results of applying a function to **subsets** of the data as defined by **one or more grouping variables**.

```{r}
#get the mean miles per gallon for each gear levels:
tapply(mtcars$mpg,mtcars$gear,mean)
```

m(ulitple)apply
========================================================

Apply a function to each **set** of elements in the **multiple objects** given as inputs (so easy to understand!)

mapply( _some\_function_ , _object1_ , _object2_ , ...)

```{r}
letters[1:4]
1:4
```

Can you guess what will be the ouput of:
```{r eval=FALSE}
mapply(rep, letters[1:4], 1:4)
```

m(ulitple)apply
========================================================

The answer is:
```{r}
mapply(rep, letters[1:4], 1:4)
```

m(ulitple)apply
========================================================

**Important**: mapply does not apply a function to **all** combination of elements, for that purpose one need to use **outer**

```{r}
outer(1:4,1:4,"+")
```

m(ulitple)apply
========================================================

Usage of mapply, for example when one wants to get the correlation between pairs of variables in two datasets:

```{r}
#correlation between two sets of variables
mtcars_std <- as.data.frame(
  sapply(mtcars,function(x) (x-mean(x))/sd(x)))
mapply(cor,x=mtcars,y=mtcars_std)
```

m(ulitple)apply
========================================================

Time for some exercices

plyr
========================================================

The basic idea of **plyr** is to control the **class** of the object outputed after applying a function to some object.

This is done through using letter shortcuts:
- **a** for array
- **d** for data frame
- **l** for list
- **_** for no output


plyr
========================================================

The plyr functions always ends with **ply**, the first letter is the input format, the second letter is the output format.

- **la**ply : I give you a **l**ist as input and I would like an **a**rray as output
- **ad**ply : I give you an array as input and would like a data frame as output, **note** that when using a\*ply you need to specify the **margins** just like with apply
- **ld**ply : ???
- **ll**ply : ???

plyr
========================================================

I have a community matrix and I would like to standardize the rows by the maximum of each row and to have a data frame as output for latter analysis:

```{r}
adply(comm,1,function(x) round(x/max(x),2))
```

plyr
========================================================

Now I would like to know the quantiles for each species and get the output in a list:

```{r}
alply(comm,2,quantile,probs=c(0.25,0.5,0.75))
```

plyr
========================================================

Using "_" as the second letter do not create any output, **but** the side-effects of calling the functions are kept, useful for functions like: plot, print ...

```{r}
#make an histogram of species abundance
par(mfrow=c(4,3))
a_ply(comm,2,hist,xlab="Abundance")
```

plyr
========================================================

Using "_" as the second letter do not create any output, **but** the side-effects of calling the functions are kept, useful for functions like: plot, print ...

```{r}
a_ply(comm,1,function(x) print(summary(x)))
```



